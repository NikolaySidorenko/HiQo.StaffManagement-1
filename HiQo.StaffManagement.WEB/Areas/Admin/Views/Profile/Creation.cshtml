@model HiQo.StaffManagement.Core.ViewModels.UserViewModel
@{
    ViewBag.Title = Model.UserId == 0 ? "Create" : "Update";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-5">
            <div class="panel panel-default">
                <div class="panel-heading">
                    @if (Model.UserId == 0)
                    {
                        <text>Create new user</text>
                    }
                    else
                    {
                        <text>@Model.FirstName @Model.LastName</text>
                    }
                </div>
                <div class="panel-body">
                    @using (Html.BeginForm("Creation", "Profile", new { obj = Model }, FormMethod.Post))
                    {
                        @Html.HiddenFor(g => g.UserId)
                        @Html.HiddenFor(g => g.UserName)
                        @Html.HiddenFor(g => g.Password)
                        @Html.ValidationMessageFor(g => g)
                        <p>
                            <text>First Name:@Html.EditorFor(g => g.FirstName, new { htmlAttributes = new { @class = "form-control" } })</text>
                            @Html.ValidationMessageFor(g => g.FirstName, "", new { @class = "text-danger" })
                        </p>
                        <p>
                            <text>Last Name:@Html.EditorFor(g => g.LastName, new { htmlAttributes = new { @class = "form-control" } })</text>
                            @Html.ValidationMessageFor(g => g.LastName, "", new { @class = "text-danger" })
                        </p>
                        <p>
                            @if (Model.UserId != 0)
                            {
                                <text>BirthDate: @Html.TextBoxFor(g => g.BirthDate, new { Value = @Model.BirthDate.ToShortDateString(), @class = "form-control" })</text>
                                @Html.ValidationMessageFor(g => g.BirthDate, "", new { @class = "text-danger" })
                            }
                            else
                            {
                                <text>BirthDate: @Html.EditorFor(g => g.BirthDate, new { htmlAttributes = new { @class = "form-control", type = "date" } })</text>
                                @Html.ValidationMessageFor(g => g.BirthDate, "", new { @class = "text-danger" })
                            }
                        </p>
                        <hr class="dividing-line" />
                        <p>
                            <text>Phone number:@Html.EditorFor(g => g.MainPhoneNumber, new { htmlAttributes = new { @class = "form-control" } })</text>
                            @Html.ValidationMessageFor(g => g.MainPhoneNumber, "", new { @class = "text-danger" })
                        </p>
                        <p>
                            <text>Email: @Html.EditorFor(g => g.Email, new { htmlAttributes = new { @class = "form-control" } })</text>
                            @Html.ValidationMessageFor(g => g.Email, "", new { @class = "text-danger" })
                        </p>
                        <p>
                            @Html.LabelFor(g => g.Address)<br />
                            @Html.EditorFor(g => g.Address, new { htmlAttributes = new { @class = "form-control", @id = "Address" } })<br />
                            @Html.ValidationMessageFor(g => g.Address, "", new { @class = "text-danger" })
                        </p>
                        <p>
                            @Html.LabelFor(g => g.Longitude)<br />
                            @Html.EditorFor(g => g.Longitude, new { htmlAttributes = new { @class = "form-control", @id = "Long" } })<br />
                            @Html.ValidationMessageFor(g => g.Longitude, "", new { @class = "text-danger" })
                        </p>
                        <p>
                            @Html.LabelFor(g => g.Latitude)<br />
                            @Html.EditorFor(g => g.Latitude, new { htmlAttributes = new { @class = "form-control", @id = "Lat" } })<br />
                            @Html.ValidationMessageFor(g => g.Latitude, "", new { @class = "text-danger" })
                        </p> 


                        <hr class="dividing-line" />
                        <text>Department:@Html.DropDownListFor(model => model.CurrentDepartmentId, new SelectList(Model.DictionaryOfDepartments, "key", "value"),
                            "---Please select a department---", new {@class = "form-control"}) </text>
                        @Html.ValidationMessageFor(g => g.CurrentDepartmentId, "", new { @class = "text-danger" })
                        <br />
                        <text>Category:
                            @Html.DropDownListFor(model => model.CurrentCategoryId, new SelectList(Model.DictionaryOfCategories, "key", "value"),
                                "---Please select a category---", new {@class = "form-control"})</text>
                        @Html.ValidationMessageFor(g => g.CurrentCategoryId, "", new { @class = "text-danger" })
                        <br />
                        <text>Position:
                            @Html.DropDownListFor(model => model.CurrentPositionId, new SelectList(Model.DictionaryOfPositions, "key", "value"),
                                "---Please select a position---", new {@class = "form-control"})</text>
                        @Html.ValidationMessageFor(g => g.CurrentPositionId, "", new { @class = "text-danger" })
                        <br />
                        <text>Position level:
                            @Html.DropDownListFor(model => model.CurrentPositionLevelId, new SelectList(Model.DictionaryOfPositionLevels, "key", "value"),
                                "---Please select a position level---", new {@class = "form-control"})</text>
                        @Html.ValidationMessageFor(g => g.CurrentPositionLevelId, "", new { @class = "text-danger" })
                        <br />
                        <text>Role:
                            @Html.DropDownListFor(model => model.CurrentRoleId, new SelectList(Model.DictionaryOfRoles, "key", "value"),
                                "---Please select a role---", new {@class = "form-control"})</text>
                        @Html.ValidationMessageFor(g => g.CurrentRoleId, "", new { @class = "text-danger" })
                        <br />

                        if (Model.UserId != 0)
                        {
                            <input type="submit" class="btn btn-default" value="Update" />
                        }
                        else
                        {
                            <input type="submit" class="btn btn-default" value="Create" />
                        }
                    }
                </div>
            </div>
        </div>
        <div class="col-md-7" id="myMap" style="position:relative;width:650px;height:400px;float:left;"></div>
    </div>
</div>



<script type='text/javascript'
        src='http://www.bing.com/api/maps/mapcontrol?callback=GetMap'
        async defer></script>
<script>
    var map, searchManager, pushpin, locat;

    function GetMap() 
    {
        var lng=document.getElementById("Long").value;
        var lat=document.getElementById("Lat").value;
        locat=new Microsoft.Maps.Location(lat,lng);
        map = new Microsoft.Maps.Map('#myMap', {
            credentials: '@ViewBag.Key',
            center:locat,
            zoom: 5
        });
        Microsoft.Maps.Events.addHandler(map, 'click', reverseGeocode);
        pushpin=new Microsoft.Maps.Pushpin(locat);
        map.entities.push(pushpin);
    }

    function reverseGeocode(e)
    {
        var point = new Microsoft.Maps.Point(e.getX(), e.getY());
        var clickLocation = e.target.tryPixelToLocation(point);

        if (!searchManager)
        {           
            Microsoft.Maps.loadModule('Microsoft.Maps.Search', function () {
                searchManager = new Microsoft.Maps.Search.SearchManager(map);
                reverseGeocode(e);
            });
        }
        else
        {
            var searchRequest = {
                location: clickLocation,
                callback: function (r) {
                    document.getElementById("Address").value=r.name;
                    document.getElementById("Long").value=clickLocation.longitude;
                    document.getElementById("Lat").value=clickLocation.latitude;
                    map.entities.clear();
                    pushpin.setLocation(locat);
                
                },
                errorCallback: function (e) {
                    //If there is an error, alert the user about it.
                    alert("Unable to reverse geocode location.");
                }
            };
            searchManager.reverseGeocode(searchRequest);
        }
    }
</script>

